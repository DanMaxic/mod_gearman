diff --git a/base/broker.c b/base/broker.c
index 329543f..8f5bc88 100644
--- a/base/broker.c
+++ b/base/broker.c
@@ -174,13 +174,14 @@ void broker_system_command(int type, int flags, int attr, struct timeval start_t
 
 
 /* send event handler data to broker */
-void broker_event_handler(int type, int flags, int attr, int eventhandler_type, void *data, int state, int state_type, struct timeval start_time, struct timeval end_time, double exectime, int timeout, int early_timeout, int retcode, char *cmd, char *cmdline, char *output, struct timeval *timestamp){
+int broker_event_handler(int type, int flags, int attr, int eventhandler_type, void *data, int state, int state_type, struct timeval start_time, struct timeval end_time, double exectime, int timeout, int early_timeout, int retcode, char *cmd, char *cmdline, char *output, struct timeval *timestamp){
 	service *temp_service=NULL;
 	host *temp_host=NULL;
 	char *command_buf=NULL;
 	char *command_name=NULL;
 	char *command_args=NULL;
 	nebstruct_event_handler_data ds;
+	int return_code=OK;
 
 	if(!(event_broker_options & BROKER_EVENT_HANDLERS))
 		return;
@@ -227,12 +228,12 @@ void broker_event_handler(int type, int flags, int attr, int eventhandler_type,
 	ds.output=output;
 
 	/* make callbacks */
-	neb_make_callbacks(NEBCALLBACK_EVENT_HANDLER_DATA,(void *)&ds);
+	return_code=neb_make_callbacks(NEBCALLBACK_EVENT_HANDLER_DATA,(void *)&ds);
 
 	/* free memory */
 	my_free(command_buf);
 
-	return;
+	return return_code;
         }
 
 
@@ -1010,4 +1011,3 @@ struct timeval get_broker_timestamp(struct timeval *timestamp){
 
 
 #endif
-
diff --git a/base/sehandlers.c b/base/sehandlers.c
index 6def42e..a53d99f 100644
--- a/base/sehandlers.c
+++ b/base/sehandlers.c
@@ -32,6 +32,9 @@
 #include "../include/perfdata.h"
 #include "../include/broker.h"
 
+#ifdef USE_EVENT_BROKER
+#include "../include/neberrors.h"
+#endif
 
 extern int             enable_event_handlers;
 extern int             obsess_over_services;
@@ -251,6 +254,7 @@ int run_global_service_event_handler(service *svc){
 #ifdef USE_EVENT_BROKER
 	struct timeval start_time;
 	struct timeval end_time;
+	int neb_result=OK;
 #endif
 	int macro_options=STRIP_ILLEGAL_MACRO_CHARS|ESCAPE_MACRO_CHARS;
 
@@ -275,13 +279,6 @@ int run_global_service_event_handler(service *svc){
 	gettimeofday(&start_time,NULL);
 #endif
 
-#ifdef USE_EVENT_BROKER
-	/* send event data to broker */
-	end_time.tv_sec=0L;
-	end_time.tv_usec=0L;
-	broker_event_handler(NEBTYPE_EVENTHANDLER_START,NEBFLAG_NONE,NEBATTR_NONE,GLOBAL_SERVICE_EVENTHANDLER,(void *)svc,svc->current_state,svc->state_type,start_time,end_time,exectime,event_handler_timeout,early_timeout,result,global_service_event_handler,NULL,NULL,NULL);
-#endif
-
 	/* get the raw command line */
 	get_raw_command_line(global_service_event_handler_ptr,global_service_event_handler,&raw_command,macro_options);
 	if(raw_command==NULL)
@@ -302,6 +299,22 @@ int run_global_service_event_handler(service *svc){
 		logit(NSLOG_EVENT_HANDLER,FALSE,processed_logentry);
 		}
 
+#ifdef USE_EVENT_BROKER
+	/* send event data to broker */
+	end_time.tv_sec=0L;
+	end_time.tv_usec=0L;
+	neb_result=broker_event_handler(NEBTYPE_EVENTHANDLER_START,NEBFLAG_NONE,NEBATTR_NONE,GLOBAL_SERVICE_EVENTHANDLER,(void *)svc,svc->current_state,svc->state_type,start_time,end_time,exectime,event_handler_timeout,early_timeout,result,global_service_event_handler,processed_command,NULL,NULL);
+
+	/* neb module wants to override (or cancel) the event handler - perhaps it will run the eventhandler itself */
+	if(neb_result==NEBERROR_CALLBACKOVERRIDE) {
+		my_free(processed_command);
+		my_free(raw_command);
+		my_free(raw_logentry);
+		my_free(processed_logentry);
+		return OK;
+	}
+#endif
+
 	/* run the command */
 	result=my_system(processed_command,event_handler_timeout,&early_timeout,&exectime,&command_output,0);
 
@@ -344,6 +357,7 @@ int run_service_event_handler(service *svc){
 #ifdef USE_EVENT_BROKER
 	struct timeval start_time;
 	struct timeval end_time;
+	int neb_result=OK;
 #endif
 	int macro_options=STRIP_ILLEGAL_MACRO_CHARS|ESCAPE_MACRO_CHARS;
 
@@ -364,12 +378,6 @@ int run_service_event_handler(service *svc){
 	gettimeofday(&start_time,NULL);
 #endif
 
-#ifdef USE_EVENT_BROKER
-	/* send event data to broker */
-	end_time.tv_sec=0L;
-	end_time.tv_usec=0L;
-	broker_event_handler(NEBTYPE_EVENTHANDLER_START,NEBFLAG_NONE,NEBATTR_NONE,SERVICE_EVENTHANDLER,(void *)svc,svc->current_state,svc->state_type,start_time,end_time,exectime,event_handler_timeout,early_timeout,result,svc->event_handler,NULL,NULL,NULL);
-#endif
 
 	/* get the raw command line */
 	get_raw_command_line(svc->event_handler_ptr,svc->event_handler,&raw_command,macro_options);
@@ -391,6 +399,22 @@ int run_service_event_handler(service *svc){
 		logit(NSLOG_EVENT_HANDLER,FALSE,processed_logentry);
 		}
 
+#ifdef USE_EVENT_BROKER
+	/* send event data to broker */
+	end_time.tv_sec=0L;
+	end_time.tv_usec=0L;
+	neb_result=broker_event_handler(NEBTYPE_EVENTHANDLER_START,NEBFLAG_NONE,NEBATTR_NONE,SERVICE_EVENTHANDLER,(void *)svc,svc->current_state,svc->state_type,start_time,end_time,exectime,event_handler_timeout,early_timeout,result,svc->event_handler,processed_command,NULL,NULL);
+
+	/* neb module wants to override (or cancel) the event handler - perhaps it will run the eventhandler itself */
+	if(neb_result==NEBERROR_CALLBACKOVERRIDE) {
+		my_free(processed_command);
+		my_free(raw_command);
+		my_free(raw_logentry);
+		my_free(processed_logentry);
+		return OK;
+	}
+#endif
+
 	/* run the command */
 	result=my_system(processed_command,event_handler_timeout,&early_timeout,&exectime,&command_output,0);
 
@@ -476,6 +500,7 @@ int run_global_host_event_handler(host *hst){
 #ifdef USE_EVENT_BROKER
 	struct timeval start_time;
 	struct timeval end_time;
+	int neb_result=OK;
 #endif
 	int macro_options=STRIP_ILLEGAL_MACRO_CHARS|ESCAPE_MACRO_CHARS;
 
@@ -500,13 +525,6 @@ int run_global_host_event_handler(host *hst){
 	gettimeofday(&start_time,NULL);
 #endif
 
-#ifdef USE_EVENT_BROKER
-	/* send event data to broker */
-	end_time.tv_sec=0L;
-	end_time.tv_usec=0L;
-	broker_event_handler(NEBTYPE_EVENTHANDLER_START,NEBFLAG_NONE,NEBATTR_NONE,GLOBAL_HOST_EVENTHANDLER,(void *)hst,hst->current_state,hst->state_type,start_time,end_time,exectime,event_handler_timeout,early_timeout,result,global_host_event_handler,NULL,NULL,NULL);
-#endif
-
 	/* get the raw command line */
 	get_raw_command_line(global_host_event_handler_ptr,global_host_event_handler,&raw_command,macro_options);
 	if(raw_command==NULL)
@@ -527,6 +545,22 @@ int run_global_host_event_handler(host *hst){
 		logit(NSLOG_EVENT_HANDLER,FALSE,processed_logentry);
 		}
 
+#ifdef USE_EVENT_BROKER
+	/* send event data to broker */
+	end_time.tv_sec=0L;
+	end_time.tv_usec=0L;
+	neb_result=broker_event_handler(NEBTYPE_EVENTHANDLER_START,NEBFLAG_NONE,NEBATTR_NONE,GLOBAL_HOST_EVENTHANDLER,(void *)hst,hst->current_state,hst->state_type,start_time,end_time,exectime,event_handler_timeout,early_timeout,result,global_host_event_handler,processed_command,NULL,NULL);
+
+	/* neb module wants to override (or cancel) the event handler - perhaps it will run the eventhandler itself */
+	if(neb_result==NEBERROR_CALLBACKOVERRIDE) {
+		my_free(processed_command);
+		my_free(raw_command);
+		my_free(raw_logentry);
+		my_free(processed_logentry);
+		return OK;
+	}
+#endif
+
 	/* run the command */
 	result=my_system(processed_command,event_handler_timeout,&early_timeout,&exectime,&command_output,0);
 
@@ -568,6 +602,7 @@ int run_host_event_handler(host *hst){
 #ifdef USE_EVENT_BROKER
 	struct timeval start_time;
 	struct timeval end_time;
+	int neb_result=OK;
 #endif
 	int macro_options=STRIP_ILLEGAL_MACRO_CHARS|ESCAPE_MACRO_CHARS;
 
@@ -588,13 +623,6 @@ int run_host_event_handler(host *hst){
 	gettimeofday(&start_time,NULL);
 #endif
 
-#ifdef USE_EVENT_BROKER
-	/* send event data to broker */
-	end_time.tv_sec=0L;
-	end_time.tv_usec=0L;
-	broker_event_handler(NEBTYPE_EVENTHANDLER_START,NEBFLAG_NONE,NEBATTR_NONE,HOST_EVENTHANDLER,(void *)hst,hst->current_state,hst->state_type,start_time,end_time,exectime,event_handler_timeout,early_timeout,result,hst->event_handler,NULL,NULL,NULL);
-#endif
-
 	/* get the raw command line */
 	get_raw_command_line(hst->event_handler_ptr,hst->event_handler,&raw_command,macro_options);
 	if(raw_command==NULL)
@@ -615,6 +643,22 @@ int run_host_event_handler(host *hst){
 		logit(NSLOG_EVENT_HANDLER,FALSE,processed_logentry);
 		}
 
+#ifdef USE_EVENT_BROKER
+	/* send event data to broker */
+	end_time.tv_sec=0L;
+	end_time.tv_usec=0L;
+	neb_result=broker_event_handler(NEBTYPE_EVENTHANDLER_START,NEBFLAG_NONE,NEBATTR_NONE,HOST_EVENTHANDLER,(void *)hst,hst->current_state,hst->state_type,start_time,end_time,exectime,event_handler_timeout,early_timeout,result,hst->event_handler,processed_command,NULL,NULL);
+
+	/* neb module wants to override (or cancel) the event handler - perhaps it will run the eventhandler itself */
+	if(neb_result==NEBERROR_CALLBACKOVERRIDE) {
+		my_free(processed_command);
+		my_free(raw_command);
+		my_free(raw_logentry);
+		my_free(processed_logentry);
+		return OK;
+	}
+#endif
+
 	/* run the command */
 	result=my_system(processed_command,event_handler_timeout,&early_timeout,&exectime,&command_output,0);
 
@@ -780,5 +824,3 @@ int handle_host_state(host *hst){
 
 	return OK;
         }
-
-
diff --git a/include/broker.h b/include/broker.h
index bbb8810..8c15b03 100644
--- a/include/broker.h
+++ b/include/broker.h
@@ -188,7 +188,7 @@ struct timeval get_broker_timestamp(struct timeval *);
 void broker_program_state(int,int,int,struct timeval *);
 void broker_timed_event(int,int,int,timed_event *,struct timeval *);
 void broker_log_data(int,int,int,char *,unsigned long,time_t,struct timeval *);
-void broker_event_handler(int,int,int,int,void *,int,int,struct timeval,struct timeval,double,int,int,int,char *,char *,char *,struct timeval *);
+int broker_event_handler(int,int,int,int,void *,int,int,struct timeval,struct timeval,double,int,int,int,char *,char *,char *,struct timeval *);
 void broker_ocp_data(int,int,int,void *,int,int,double,int,int,struct timeval *);
 void broker_system_command(int,int,int,struct timeval,struct timeval,double,int,int,int,char *,char *,struct timeval *);
 int broker_host_check(int,int,int,host *,int,int,int,struct timeval,struct timeval,char *,double,double,int,int,int,char *,char *,char *,char *,struct timeval *);
